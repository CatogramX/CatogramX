import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'
}

configurations.all {
    exclude group: 'com.google.firebase', module: 'firebase-core'
    exclude group: 'androidx.recyclerview', module: 'recyclerview'
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim().substring(0, 8)
}

def getGitDate = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'show', '-s', '--format=%ct'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

dependencies {
    implementation 'androidx.core:core:1.8.0'
    implementation 'androidx.palette:palette:1.0.0'
    implementation 'androidx.exifinterface:exifinterface:1.3.3'
    implementation 'androidx.interpolator:interpolator:1.0.0'
    implementation 'androidx.viewpager:viewpager:1.0.0'
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'
    implementation 'androidx.sharetarget:sharetarget:1.2.0-rc01'
    implementation 'androidx.cardview:cardview:1.0.0'

    compileOnly 'org.checkerframework:checker-qual:3.22.0'
    compileOnly 'org.checkerframework:checker-compat-qual:2.5.5'

    implementation 'com.google.firebase:firebase-messaging:23.0.5'
    implementation 'org.osmdroid:osmdroid-android:6.1.10'
    //noinspection GradleDependency
    implementation 'com.googlecode.mp4parser:isoparser:1.0.6' // NOT YET SUPPORTED BY TELEGRAM
    //noinspection GradleDependency
    implementation 'com.stripe:stripe-android:2.0.2' // NOT YET SUPPORTED BY TELEGRAM
    implementation 'com.google.mlkit:language-id:17.0.3'
    implementation 'org.apache.commons:commons-text:1.9'

    // CameraX Implementation
    implementation "androidx.camera:camera-core:1.1.0-rc01"
    implementation "androidx.camera:camera-camera2:1.1.0-rc01"
    implementation "androidx.camera:camera-lifecycle:1.1.0-rc01"
    implementation "androidx.camera:camera-view:1.1.0-rc01"
    implementation "androidx.camera:camera-extensions:1.1.0-rc01"
    implementation 'androidx.interpolator:interpolator:1.0.0'

    // NATIVE LIBS
    implementation 'com.getkeepsafe.relinker:relinker:1.4.4'

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
}

ext.abiCodes = ['universal':0, 'armeabi-v7a':1, 'arm64-v8a':5, x86:2, x86_64:6]

//return an api key from a properties file.
def getAppId(){
    Properties properties = new Properties()
    properties.load(new FileInputStream("./API_KEYS"))
    return properties.get("APP_ID")
}
def getAppHash(){
    Properties properties = new Properties()
    properties.load(new FileInputStream("./API_KEYS"))
    return "\"" + properties.get("APP_HASH") + "\""
}

android {
    compileSdkVersion 32
    buildToolsVersion '32.1.0-rc1'
    ndkVersion '21.4.7075529'

    defaultConfig.applicationId = "org.eu.catox"

    sourceSets.main.jniLibs.srcDirs = ['./jni/']

    buildFeatures {
        prefab true
    }

    externalNativeBuild {
        cmake {
            path 'jni/CMakeLists.txt'
        }
    }

    lint {
        checkReleaseBuilds false
        disable 'MissingTranslation', 'ExtraTranslation', 'BlockedPrivateApi'
    }

    packagingOptions {
        resources {
            excludes += '**'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11

        coreLibraryDesugaringEnabled true
    }

    signingConfigs {
        release {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
            jniDebuggable true
            ndk.debugSymbolLevel 'FULL'
            applicationIdSuffix ".beta"
            resValue "string", "BuildAppName", "@string/catox_AppNameBeta"
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles 'proguard-rules.pro'
            resValue "string", "BuildAppName", "@string/catox_AppName"
        }
    }

    defaultConfig.versionCode = 2656

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def abi = output.getFilter('ABI')
            if (abi == null) abi = 'universal'
            outputFileName = "CatogramX-${defaultConfig.versionName}-${defaultConfig.versionCode}-${abi}.apk"
            def abiVersionCode = project.ext.abiCodes.get(abi)
            output.versionCodeOverride = defaultConfig.versionCode * 10 + abiVersionCode
        }
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 32
        versionName "2.0.0"
        buildConfigField "String", "GIT_COMMIT_HASH", "\"${getGitHash()}\""
        buildConfigField "Long", "GIT_COMMIT_DATE", "${getGitDate()}L"

        //obtain your own keys at https://core.telegram.org/api/obtaining_api_id
        buildConfigField 'int', 'APP_ID', getAppId()
        buildConfigField 'String', 'APP_HASH', getAppHash()

        externalNativeBuild {
            cmake {
                version '3.10.2'
                arguments '-DANDROID_STL=c++_static', '-DANDROID_PLATFORM=android-21', "-DNDK_CCACHE=ccache"
            }
        }
    }

    bundle {
        language {
            enableSplit = false
        }
    }

    splits.abi {
        enable true
        universalApk true
    }

    dependenciesInfo.includeInApk false
    namespace 'org.telegram.messenger'
}

def patchBundleReleaseManifest = task('patchBundleReleaseManifest').doLast {
    def manifest = Paths.get(project.buildDir.path, 'intermediates',
            'bundle_manifest', 'release', 'AndroidManifest.xml')
    def manifestContent = manifest.getText()
    manifestContent = manifestContent.replace("catox.apks", "catox.bundle")
    Files.write(manifest, manifestContent.getBytes())
}

afterEvaluate {
    tasks.getByName("processApplicationManifestReleaseForBundle").finalizedBy patchBundleReleaseManifest
}
